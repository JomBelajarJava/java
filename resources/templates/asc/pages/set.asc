{:title "Set"
:layout :page
:page-index 32
:date "2015-07-06"
:category "Data Structure"}

_Set_ boleh digunakan untuk menyimpan data yang lain dari yang lain.
Jika ada yang sama, _Set_ akan menyimpan satu sahaja. Class yang
menggunakan interface _Set_ antaranya ialah _HashSet_, _TreeSet_, dan
_LinkedHashSet_.

=== HashSet

_HashSet_ digunakan jika kita tidak kisah bagaimana kedudukan data di
dalam _Set_. Dari segi performance, _HashSet_ adalah yang terbaik.

Contoh penggunaannya:

[source,java]
----
package datastructure;

import java.util.HashSet;
import java.util.Set;

public class ContohSet {
    public static void main( args) {
        Set<String> kuih = new HashSet<>();
        kuih.add("karipap");
        kuih.add("donat");
        kuih.add("kuih lapis");
        kuih.add("karipap");

        for (String k : kuih) {
            System.out.println(k);
        }
    }
}
----

Hasilnya hanya satu _“karipap”_ sahaja yang ada dalam Set tersebut
walaupun kita masukkan dua. Perhatikan juga kedudukan kuih tidak
mengikut urutan seperti yang kita masukkan.

=== TreeSet

_TreeSet_ akan menyusun data di dalamnya mengikut nilai data tersebut,
contohnya jika nombor akan mengikut urutan angka naik, jika String akan
mengikut huruf:

[source,java]
----
package datastructure;

import java.util.Set;
import java.util.TreeSet;

public class ContohSet {
    public static void main(String[] args) {
        Set<Integer> nombor = new TreeSet<>();
        nombor.add(10);
        nombor.add(10);
        nombor.add(5);
        nombor.add(12);

        for (Integer k : nombor) {
            System.out.println(k);
        }
    }
}
----

Dari segi performance, _TreeSet_ adalah yang paling lambat.

=== LinkedHashSet

_LinkedHashSet_ pula menyusun data mengikut urutan sebagaimana
urutan kita memasukkan data:

[source,java]
----
package datastructure;

import java.util.LinkedHashSet;
import java.util.Set;

public class ContohSet {
    public static void main(String[] args) {
        Set<Integer> nombor = new LinkedHashSet<>();
        nombor.add(10);
        nombor.add(10);
        nombor.add(5);
        nombor.add(12);

        for (Integer k : nombor) {
            System.out.println(k);
        }
    }
}
----

Dari segi performance, _LinkedHashSet_ hampir sama laju dengan
_HashSet_.

=== Buang duplicate

_Set_ boleh digunakan untuk membuang duplicate daripada _data structure_
yang lain.

Contoh membuang duplicate dalam _array_:

[source,java]
----
package datastructure;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class ContohSet {
    public static void main(String[] args) {

        Integer[] nombor = {1, 1, 1, 1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6, 7};

        Set<Integer> setNombor = new HashSet<>(Arrays.asList(nombor));

        Integer[] nomborTanpaDuplicate = setNombor.toArray(new Integer[setNombor.size()]);

        for (Integer n : nomborTanpaDuplicate) {
            System.out.println(n);
        }
    }
}
----

Contoh membuang duplicate dalam _List_:

[source,java]
----
package datastructure;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ContohSet {
    public static void main(String[] args) {
        List<String> nama = new ArrayList<>();
        nama.add("ali");
        nama.add("ali");
        nama.add("ali");

        Set<String> namaSet = new HashSet<>(nama);
        nama.clear();
        nama.addAll(namaSet);

        for (String n : nama) {
            System.out.println(n);
        }
    }
}
----
