{:title "Interface"
:layout :page
:page-index 16
:date "2015-06-30"
:category "Object-oriented Programming"}

Dalam sesetengah projek, ada masa code ditulis oleh beberapa orang
programmer. Contohnya, seorang mungkin buat _class_ Kucing, dan seorang
lagi menggunakan _class_ Kucing di _method_ _main()_. Jadi, mereka
perlulah tahu apa yang boleh dilakukan oleh _class_ Kucing. Oleh itu,
_‘interface’_ digunakan untuk menentukan apa yang patut ada pada _class_
Kucing.

Untuk membuat _interface_, klik kanan pada package _‘kucing’_, kemudian
klik _‘New Java Interface’_. Kita boleh namakan apa-apa sahaja, jadi
kita namakan _interface_ ini sebagai _‘HaiwanBergerak’_. Selepas klik
_‘Finish’_, Netbeans akan menghasilkan file berikut:

[source,java]
----
package kucing;

public interface HaiwanBergerak {

}
----

Untuk menambah fungsi HaiwanBergerak, kita boleh buat seperti
menghasilkan _method_. Cuma bezanya _method_ di _interface_ tidak ada
_curly braces_, {}. Contohnya,

[source,java]
----
package kucing;

public interface HaiwanBergerak {

    void jalan();

    void lari();

    void lompat();
}
----

Dengan ini, mana-mana _class_ yang menggunakan _interface_
HaiwanBergerak wajib membuat method _jalan()_, _lari()_, dan _lompat()_.

=== implements

Keyword _‘implements’_ boleh diletakkan pada _class_ untuk menggunakan
sesuatu _interface_. Contohnya,

[source,java]
----
package kucing;

public class Kucing implements HaiwanBergerak {

    private String nama;
    private int umur;

    public Kucing(String nama, int umur) {
        this.nama = nama;
        this.umur = umur;
    }
}
----

Kemudian kita wajib menambah _methods_ pada _class_ Kucing mengikut
_methods_ yang ada pada _interface_ HaiwanBergerak, seperti berikut:

[source,java]
----
package kucing;

public class Kucing implements HaiwanBergerak {

    private String nama;
    private int umur;

    public Kucing(String nama, int umur) {
        this.nama = nama;
        this.umur = umur;
    }

    @Override
    public void jalan() {

    }

    @Override
    public void lari() {

    }

    @Override
    public void lompat() {

    }
}
----

_‘@Override’_ ditambah bertujuan untuk beritahu _compiler_ bahawa kita
tahu apa yang kita tengah buat. Kemudian, kita boleh tambah code dalam
_methods_ tersebut bergantung kepada apa yang kita mahu:

[source,java]
----
package kucing;

public class Kucing implements HaiwanBergerak {

    private String nama;
    private int umur;

    public Kucing(String nama, int umur) {
        this.nama = nama;
        this.umur = umur;
    }

    @Override
    public void jalan() {
        System.out.println("Jalan...");
    }

    @Override
    public void lari() {
        System.out.println("Lari!");
    }

    @Override
    public void lompat() {
        System.out.println("Lompat!");

    }
}
----

Kita juga boleh menggunakan lebih dari satu _interface_ pada satu
_class_, contohnya:

[source,java]
----
package kucing;

public class Kucing implements HaiwanBergerak, HaiwanBeranak {

    private String nama;
    private int umur;

    public Kucing(String nama, int umur) {
        this.nama = nama;
        this.umur = umur;
    }

    @Override
    public void jalan() {
        System.out.println("Jalan...");
    }

    @Override
    public void lari() {
        System.out.println("Lari!");
    }

    @Override
    public void lompat() {
        System.out.println("Lompat!");
    }

    @Override
    public void beranak() {
        System.out.println("Beranak!!!!!");
    }
}
----

Antara kelebihan menggunakan IDE seperti Netbeans ialah IDE boleh
menambah _methods_ daripada _interface_ tersebut secara automatik.
