{:title "List"
:layout :post
:date "2015-07-06"}

Antara class yang menggunakan interface List ialah _ArrayList_ dan
_LinkedList_. Cara penggunaannya adalah seperti berikut:

[source,java]
----
package datastructure;

import java.util.ArrayList;
import java.util.List;

public class ContohList {
    public static void main(String[] args) {

        List<String> names = new ArrayList<>();
        names.add("Abu");
        names.add("Ali");
        names.add("Atan");

        System.out.println("List yang asal:");

        for (String name : names) {
            System.out.println(name);
        }

        names.remove(1);

        System.out.println("Selepas buang nama di indeks 1:");

        for (String name : names) {
            System.out.println(name);
        }
    }
}
----

Netbeans membenarkan _diamond interface_ seperti ini:

[source,java]
List<String> names = new ArrayList<>();

Jika anda menggunakan IDE yang lain, anda mungkin perlu menulis begini:

[source,java]
List<String> names = new ArrayList<String>();

Contoh di atas menggunakan method _‘add()’_ untuk menambah data ke dalam
List, dan method _‘remove()’_ untuk membuang data daripada List. Untuk
lihat method lain yang boleh digunakan, sila rujuk Java API.

Klik untuk lihat List di Java API

Cara lain untuk membuat List adalah dengan mengambil data daripada array
menggunakan method _‘Arrays.asList()’_:

[source,java]
----
package datastructure;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ContohList {
    public static void main(String[] args) {
        String[] nameArray = {"Abu", "Ali", "Atan"};

        List<String> names = new ArrayList<>(Arrays.asList(nameArray));

        System.out.println("List yang asal:");

        for (String name : names) {
            System.out.println(name);
        }

        names.remove(1);

        System.out.println("Selepas buang nama di indeks 1:");

        for (String name : names) {
            System.out.println(name);
        }
    }
}
----

Untuk menggunakan _LinkedList_, tukar sahaja _ArrayList_ kepada
_LinkedList_, contohnya,

[source,java]
List<String> names = new LinkedList<>();

=== ArrayList vs LinkedList

Kita lihat cara penggunaan kedua-dua class tersebut adalah sama. Yang
membezakan ialah apa yang berlaku di dalam class tersebut.

Secara umumnya, class _ArrayList_ adalah lebih baik. Jika program kita
banyak melibatkan _add_ atau _remove_ pada awal indeks, barulah
digalakkan menggunakan _LinkedList_. Itupun jika program tersebut tidak
banyak mengakses data daripada _LinkedList _tersebut. Kesimpulannya,
jika kita mahu menggunakan _LinkedList_, kita perlu lihat perbandingan
performance program kita menggunakan kedua-duanya terlebih dahulu.

Jika malas fikir banyak, guna sahaja _ArrayList_.

Tips untuk meningkatkan performance _ArrayList_ adalah dengan menentukan
saiznya terlebih dahulu sesuai dengan data. Contohnya gunakan saiz 300
jika anda membuat program untuk check perkataan dari sebuah esei:

[source,java]
List<String> words = new ArrayList<>(300);

Secara default, saiz ArrayList ialah 10.
