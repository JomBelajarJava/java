{:title "Exception (part 1)"
:layout :post
:date "2015-07-02"}

Java menggunakan _exception_ untuk mengendalikan _error_. Apabila
_error_ berlaku, _exception_ ini dilancarkan untuk menghentikan proses
yang mempunyai _error_.

Cara mudah untuk menghasilkan _error_ adalah dengan membahagikan satu
nombor dengan kosong:

[source,java]
----
package essential;

public class BahagiKosong {
    public static void main(String[] args) {
        int a = 1 / 0;
    }
}
----

Apabila kita _run_ code tersebut, program akan keluarkan teks
menjelaskan tentang _error_ tersebut, iaitu _‘ArithmeticException: / by
zero’_.

=== try-catch

Apabila _exception_ berlaku, biasanya program akan terus tutup dan code
selepasnya tidak akan dilaksanakan. Contohnya,

[source,java]
----
package essential;

public class BahagiKosong {
    public static void main(String[] args) {
        int a = 1 / 0;
        System.out.println("ini selepas bahagi kosong");
    }
}
----

Jika kita mahu _run_ code selepasnya, kita mesti handle _exception_ itu
secara manual. Untuk handle _exception_, kita boleh menggunakan
_try-catch_ seperti berikut:

[source,java]
----
package essential;

public class BahagiKosong {
    public static void main(String[] args) {
        try {
            int a = 1 / 0;
        } catch (ArithmeticException e) {
            System.out.println("tidak boleh bahagi kosong!");
        }

        System.out.println("ini selepas bahagi kosong");
    }
}
----

=== finally

Satu tambahan kepada _try-catch_ ialah _finally_. Code di dalam
_finally_ akan wajib dilaksanakan. Ini bertujuan jika ada _exception_
lain yang tidak disangkakan berlaku.

[source,java]
----
package essential;

public class BahagiKosong {
    public static void main(String[] args) {
        try {
            int a = 1 / 0;
        } catch (ArithmeticException e) {
            System.out.println("tidak boleh bahagi kosong!");
        } finally {
            System.out.println("ini confirm dilaksanakan");
        }

        System.out.println("ini selepas bahagi kosong");
    }
}
----

=== throws

Kita boleh menggunakan _throws_ bagi menggantikan _catch_. Bezanya kita
tidak boleh handle _exception_ secara manual jika menggunakan _throws_.

[source,java]
----
package essential;

public class BahagiKosong {
    public static void main(String[] args) throws ArithmeticException {
        try {
            int a = 1 / 0;
        } finally {
            System.out.println("ini confirm berlaku");
        }

        System.out.println("ini selepas bahagi kosong");
    }
}
----
