{:title "Class (part 2)"
:layout :post
:date "2015-06-29"}

Kita kembali kepada _class_ Kucing untuk menambah sesuatu pada
_class_ tersebut, iaitu _constructor_, _setter_, dan _getter_. Kita juga
akan melihat pengenalan kepada _parameter_.

=== Constructor

Constructor ialah _method_ yang mempunyai nama yang sama dengan nama
_class_. Tujuannya adalah untuk melaksanakan sesuatu _code_ sebaik
sahaja kita _create_ _object_ daripada _class_ tersebut. Kebiasaannya
kita letak proses untuk memasukkan data ke dalam _fields_ di dalam
_constructor_, contohnya:

[source,java]
----
package kucing;

public class Kucing {

    String nama;
    int umur;

    public Kucing() {
        nama = "Tiada nama";
        umur = 0;
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }
}
----

Ini untuk mengelakkan _error,_ contohnya jika kita mengakses _fields_
walaupun _fields_ tersebut tidak mempunyai data.

Untuk melihat fungsi _constructor_, kita boleh _create object_ daripada
_class_ Kucing:

[source,java]
----
package kucing;

public class Main {
    public static void main(String[] args) {
        Kucing kucingSaya = new Kucing();

        System.out.println(kucingSaya.nama);
    }
}
----

Lihat, kita tidak perlu memasukkan data ke dalam _fields_ seperti
sebelum ini. Program secara automatik akan memasukkan data ke
dalam _fields_ bergantung kepada apa yang kita tentukan di dalam
_constructor_.

=== Setter

_Setter_ ialah _method_ yang digunakan untuk memasukkan data ke dalam
_fields_.

[source,java]
----
package kucing;

public class Kucing {

    String nama;
    int umur;

    public Kucing() {
        nama = "Tiada nama";
        umur = 0;
    }

    public void setNama(String n) {
        nama = n;
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }
}
----

‘_String_ _n_‘ yang berada di dalam kurungan _setNama_() ialah
_parameter_. _Parameter_ ialah data yang diperlukan untuk menggunakan
_method_ tersebut. Contoh kegunaan _setter_ adalah seperti berikut:

[source,java]
----
package kucing;

public class Main {
    public static void main(String[] args) {
        Kucing kucingSaya = newKucing();
        kucingSaya.setNama("Tompok");
    }
}
----

Antara kelebihan menggunakan _setter_ ialah kita dapat memastikan data
yang dimasukkan adalah data yang betul. Contohnya umur tidak boleh
menjadi negatif, jadi kita boleh pastikan nombor yang dimasukkan bukan
nombor negatif seperti berikut:

[source,java]
----
package kucing;

public class Kucing {

    String nama;
    int umur;

    public Kucing() {
        nama = "Tiada nama";
        umur = 0;
    }

    public void setNama(String n) {
        nama = n;
    }

    public void setUmur(int u) {
        if (u < 0) {
            System.out.println("Error, umur tidak boleh negatif!");
        } else {
            umur = u;
        }
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }

}
----

=== Getter

_Getter_ pula ialah _method_ untuk mengeluarkan data. Berbeza dengan
_methods_ sebelum ini yang menggunakan keyword ‘_void_‘, untuk mengeluar
data, kita perlu tukar keyword ‘_void_‘ kepada jenis data yang kita
ingin keluarkan. Contohnya, jika kita mahu mengeluarkan data dari
_field_ ‘nama’, kita perlu tukar ‘_void_‘ kepada ‘_String_‘:

[source,java]
----
package kucing;

public class Kucing {

    String nama;
    int umur;

    public Kucing() {
        nama = "Tiada nama";
        umur = 0;
    }

    public String getNama() {
        return nama;
    }

    public int getUmur() {
        return umur;
    }

    public void setNama(String n) {
        nama = n;
    }

    public void setUmur(int u) {
        if (u < 0) {
            System.out.println("Error, umur tidak boleh negatif!");
        } else {
            umur = u;
        }
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }
}
----

Kita gunakan keyword ‘_return_‘ untuk keluarkan data tersebut atau lebih
tepat memulangkan data tersebut.

Kita boleh menggunakan _getter_ seperti berikut:

[source,java]
----
package kucing;

public class Main {
    public static void main(String[] args) {
        Kucing kucingSaya = new Kucing();
        System.out.println(kucingSaya.getNama());
    }
}
----
