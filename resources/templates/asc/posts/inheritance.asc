{:title "Inheritance"
:layout :post
:date "2015-06-30"}

Tujuan kita membuat _‘inheritance’_ adalah untuk mengguna semula _class_
yang sedia ada, dan membuat sedikit pengubahsuaian tanpa mengubahsuai
_class_ yang asal.

Kita gunakan _class_ Kucing sebagai _class_ yang asal, dan kita ubahsuai
_class_ tersebut kepada _class_ KucingParsi. _Class_ Kucing adalah
seperti berikut:

[source,java]
----
package kucing;

public class Kucing {

    private String nama;
    private int umur;

    public Kucing() {
        nama = "Comel";
        umur = 5;
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrpp, slrppp");
    }
}
----

Kemudian kita buat _class_ baru bernama KucingParsi. Untuk membuat
_inheritance_, kita gunakan keyword _‘extends’_ seperti berikut:

[source,java]
----
package kucing;

public class KucingParsi extends Kucing {

}
----

Sekarang KucingParsi secara automatik sudah ada semua code yang ada di
dalam _class_ Kucing. Buktinya kita boleh cuba _create object_ daripada
_class_ KucingParsi:

[source,java]
----
package kucing;

public class Main {
    public static void main(String[] args) {
        KucingParsi kucingSaya = new KucingParsi();
        kucingSaya.minum();
    }
}
----

Kita boleh tambah _method_ seperti biasa pada _class_ KucingParsi
seperti ini:

[source,java]
----
package kucing;

public class KucingParsi extends Kucing {
    public void makan() {
        System.out.println("Makan...");
    }
}
----

=== Method overriding

Kita juga boleh ubahsuai _method_ yang sedia ada. Cara ini dipanggil
_‘method overriding’_. Kita boleh _override_ _method_ _‘minum()’_
seperti berikut:

[source,java]
----
package kucing;

public class KucingParsi extends Kucing {

    public void makan() {
        System.out.println("Makan...");
    }

    @Override
    public void minum() {
        System.out.println("Slrplrprlprlprrpl");
        System.out.println("Slrrrrrrrrrrrrp");
    }
}
----

=== Superclass vs subclass

Setelah membuat _inheritance_, _class_ yang asal dinamakan sebagai
_‘superclass’_, manakala _class_ yang baru dinamakan sebagai
_‘subclass’_. Oleh itu,

-   Kucing ialah _superclass_ kepada KucingParsi
-   KucingParsi ialah _subclass_ daripada Kucing

=== Keyword ‘super’

Kegunaan keyword _‘super’_ adalah sama dengan keyword _‘this’_. Bezanya
ialah keyword _‘super’_ merujuk kepada _superclass_. Contohnya, apabila
_constructor_ _class_ Kucing mempunyai _parameter_ seperti berikut:

[source,java]
----
package kucing;

public class Kucing {

    private String nama;
    private int umur;

    public Kucing(String nama, int umur) {
        this.nama = nama;
        this.umur = umur;
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrpp, slrppp");
    }
}
----

maka kita boleh menggunakan keyword _‘super’_ untuk menghantar data dari
_subclass_ ke _superclass_ seperti ini:

[source,java]
----
package kucing;

public class KucingParsi extends Kucing {

    public KucingParsi(String nama, int umur) {
        super(nama, umur);
    }

    public void makan() {
        System.out.println("Makan...");
    }

    @Override
    public void minum() {
        System.out.println("Slrplrprlprlprrpl");
        System.out.println("Slrrrrrrrrrrrrp");
    }
}
----
