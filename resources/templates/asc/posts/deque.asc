{:title "Deque"
:layout :post
:date "2015-07-07"}

_Deque_ (cara sebutan ‘deck’) boleh menggunakan kaedah _first in, first
out_ (FIFO) dan _last in, first out_ (LIFO). Cara untuk menggunakan
kaedah FIFO sama sahaja dengan menggunakan _queue_, jadi kita akan lihat
kaedah LIFO pula. Class yang menggunakan interface _Deque_ ialah
_ArrayDeque_ dan _LinkedList_.

=== ArrayDeque

Kaedah LIFO boleh diibaratkan seperti membuat burger. Kita letak
bahagian-bahagian burger bermula dari bawah ke atas. Apabila kita hendak
lihat daging apa, kita selak roti yang di atas.

Contoh kaedah LIFO menggunakan _ArrayDeque_:

[source,java]
----
package datastructure;

import java.util.ArrayDeque;
import java.util.Deque;

public class ContohDeque {

    public static void main(String[] args) {

        Deque<String> burger = new ArrayDeque<>();
        burger.push("roti");
        burger.push("sayur");
        burger.push("daging");
        burger.push("roti");

        System.out.println("Susunan burger:");
        for (String partBurger : burger) {
            System.out.println(partBurger);
        }

        System.out.println("Oops, lupa letak sos!");
        String pegang = burger.pop();   // keluarkan roti paling atas
        burger.push("sos + mayonis");   // tambah sos
        burger.push(pegang);    // letak balik roti

        System.out.println("Susunan burger yang baru:");
        for (String partBurger : burger) {
            System.out.println(partBurger);
        }
    }
}
----

Method yang digunakan untuk LIFO ialah:

-   _push()_ – untuk memasukkan data di hujung/atas
-   _pop()_ – keluarkan data di hujung/atas
-   _peek()_ – untuk akses data di hujung/atas tanpa keluarkan data tersebut

Method yang boleh digunakan untuk FIFO pula adalah sama seperti _Queue_
iaitu _offer()_, _poll()_, dan _peek()_.

=== LinkedList

Cara gunanya sama sahaja dengan _ArrayDeque_. Secara umumnya,
_ArrayDeque_ lebih efisyen berbanding _LinkedList_.
