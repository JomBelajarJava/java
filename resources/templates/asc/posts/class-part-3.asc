{:title "Class (part 3)"
:layout :post
:date "2015-06-30"
:category "Object-oriented Programming"}

Kita kembali lagi ke _class_ Kucing, dan kita akan membuat sesuatu yang
dipanggil sebagai _constructor overloading_ dan _method overloading_.
Kita juga akan melihat pengenalan kepada keyword _‘this’_.

=== Constructor overloading

_Constructor overloading_ bermaksud kita letakkan lebih dari satu
_constructor_ untuk _class_ tersebut, dengan syarat _parameter_ mereka
berlainan. Contohnya,

[source,java]
----
package kucing;

public class Kucing {

    private String nama;
    private int umur;

    public Kucing() {
        nama = "Tiada nama";
        umur = 0;
    }

    public Kucing(String n, int u) {
        nama = n;
        umur = u;
    }

    public String getNama() {
        return nama;
    }

    public int getUmur() {
        return umur;
    }

    public void setNama(String n) {
        nama = n;
    }

    public void setUmur(int u) {
        if (u < 0) {
            System.out.println("Error, umur tidak boleh negatif!");
        } else {
            umur = u;
        }
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }
}
----

Jadi, kita boleh tentukan _constructor_ mana yang hendak digunakan
semasa _create object_:

[source,java]
----
package kucing;

public class Main {
    public static void main(String[] args) {
        Kucing kucingSaya = new Kucing();
        Kucing kucingKawanSaya = new Kucing("Comel", 10);

        System.out.println(kucingSaya.getNama());
        System.out.println(kucingKawanSaya.getNama());
    }
}
----

=== Method overloading

_Method overloading_ juga sama, kita boleh letakkan lebih dari satu
_method_ yang mempunyai nama yang sama, dengan syarat _parameter_ mereka
berlainan. Contohnya _method_ ‘_setNama_()’,

[source,java]
----
package kucing;

public class Kucing {

    private String nama;
    private int umur;

    public Kucing() {
        nama = "Tiada nama";
        umur = 0;
    }

    public Kucing(String n, int u) {
        nama = n;
        umur = u;
    }

    public String getNama() {
        return nama;
    }

    public int getUmur() {
        return umur;
    }

    public void setNama() {
        nama = "Tiada nama";
    }

    public void setNama(String n) {
        nama = n;
    }

    public void setUmur(int u) {
        if (u < 0) {
            System.out.println("Error, umur tidak boleh negatif!");
        } else {
            umur = u;
        }
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }
}
----

dan kita boleh memilih untuk menggunakan _method_ yang mana berdasarkan
_parameter_ yang kita letakkan:

[source,java]
----
package kucing;

public class Main {

    public static void main(String[] args) {
        Kucing kucingSaya = new Kucing();

        kucingSaya.setNama("Comel");
        System.out.println(kucingSaya.getNama());

        kucingSaya.setNama();
        System.out.println(kucingSaya.getNama());
    }
}
----

=== Keyword ‘this’

Keyword ‘_this_‘ digunakan untuk merujuk _object_ daripada _class_
tersebut. Antara kegunaannya adalah untuk menentukan _variable_ yang
mana kita mahu gunakan. Contohnya apabila nama _parameter_ adalah sama
dengan nama _field_, seperti _constructor_ berikut:

[source,java]
----
package kucing;

public class Kucing {

    private String nama;
    private int umur;

    public Kucing() {
        nama = "Tiada nama";
        umur = 0;
    }

    public Kucing(String nama, int umur) {
        this.nama = nama;
        this.umur = umur;
    }

    public String getNama() {
        return nama;
    }

    public int getUmur() {
        return umur;
    }

    public void setNama() {
        nama = "Tiada nama";
    }

    public void setNama(String n) {
        nama = n;
    }

    public void setUmur(int u) {
        if (u < 0) {
            System.out.println("Error, umur tidak boleh negatif!");
        } else {
            umur = u;
        }
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }
}
----

Satu lagi kegunaannya adalah untuk menghantar data dari _parameter_ ke
_constructor_ yang lain, contohnya:

[source,java]
----
package kucing;

public class Kucing {

    private String nama;
    private int umur;

    public Kucing() {
        this("Tiada nama", 0);  // akan hantar ke Kucing(String nama, int umur)
    }

    public Kucing(String nama, int umur) {
        this.nama = nama;
        this.umur = umur;
    }

    public String getNama() {
        return nama;
    }

    public int getUmur() {
        return umur;
    }

    public void setNama() {
        nama = "Tiada nama";
    }

    public void setNama(String n) {
        nama = n;
    }

    public void setUmur(int u) {
        if (u < 0) {
            System.out.println("Error, umur tidak boleh negatif!");
        } else {
            umur = u;
        }
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }
}
----

Oleh itu, kita boleh tulis semula _class_ Kucing menggunakan keyword
‘_this_‘, seperti berikut:

[source,java]
----
package kucing;

public class Kucing {

    private String nama;
    private int umur;

    public Kucing() {
        this("Tiada nama", 0);
    }

    public Kucing(String nama, int umur) {
        this.nama = nama;
        this.umur = umur;
    }

    public String getNama() {
        return nama;
    }

    public int getUmur() {
        return umur;
    }

    public void setNama() {
        nama = "Tiada nama";
    }

    public void setNama(String nama) {
        this.nama = nama;
    }

    public void setUmur(int umur) {
        if (umur < 0) {
            System.out.println("Error, umur tidak boleh negatif!");
        } else {
            this.umur = umur;
        }
    }

    public void mengiau() {
        System.out.println("Meow");
    }

    public void minum() {
        System.out.println("Slrrp, slrrp");
    }
}
----
